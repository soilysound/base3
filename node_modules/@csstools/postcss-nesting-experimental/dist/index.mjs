import e from"postcss-selector-parser";function n(e){if(!e.nodes.length)return void e.remove();const n=e.nodes.filter((e=>"comment"===e.type));n.length===e.nodes.length&&e.replaceWith(...n)}function t(e,t){const o=t.index(e);if(o){const e=t.cloneBefore().removeAll().append(t.nodes.slice(0,o));e.raws.semicolon=!0,n(e)}t.before(e),t.raws.semicolon=!0}function o(o,s,r){t(o,s),o.selectors=function(n,t,o,s){const r=[];if(0===s.length)return;const c=e().astSync(`:is(${o.join(",")})`);for(let o=0;o<s.length;o++){const i=e().astSync(s[o]);if(!i)continue;let l=!1;if(i.walk((e=>{"nesting"===e.type&&(l=!0)})),!l){const r=i.nodes[0];let c=!1;if(r.each((e=>"combinator"===e.type&&(c=!0,!1))),0===o){let e=!1;r.each((n=>"tag"===n.type&&(e=!0,!1))),e&&n.warn(t,`Invalid nested rule : "${s[o]}"`)}c||r.insertBefore(r.at(0),e.combinator({value:" "})),r.insertBefore(r.at(0),e.nesting({}))}i.walk((e=>{"nesting"===e.type&&e.replaceWith(c.clone({}))})),r.push(i.toString())}return r}(o,r,s.selectors,o.selectors);"rule"===o.type&&"rule"===s.type&&o.selector===s.selector&&o.append(...s.nodes),n(s)}var s=["container","document","media","supports","layer"];function r(e){const n=[];let t="",o=!1,s=0,r=!1,c=!1;for(const i of e)c?c=!1:"\\"===i?c=!0:r?i===r&&(r=!1):'"'===i||"'"===i?r=i:"("===i?s+=1:")"===i?s>0&&(s-=1):0===s&&","===i&&(o=!0),o?(""!==t&&n.push(t.trim()),t="",o=!1):t+=i;return n.push(t.trim()),n}function c(e,o){var s,c;t(e,o),e.params=(s=o.params,c=e.params,r(s).map((e=>r(c).map((n=>`${e} and ${n}`)).join(", "))).join(", ")),n(o)}function i(e){return e&&"atrule"===e.type}function l(e){return e&&"rule"===e.type}function a(e,r){e.each((e=>{const u=e.parent;l(e)&&e.selector.trim()&&l(u)&&u.selector.trim()?o(e,u,r):i(e)&&l(u)&&u.selector.trim()&&function(e){return s.includes(e.name)}(e)?function(e,o,s,r){if(t(e,o),e.nodes){const t=o.clone().removeAll().append(e.nodes);e.append(t),n(o),r(t,s)}}(e,u,r,a):i(e)&&i(u)&&function(e,n){return s.includes(e.name)&&e.name===n.name}(e,u)&&c(e,u),"nodes"in e&&e.nodes.length&&a(e,r)}))}const u=()=>({postcssPlugin:"postcss-nesting",Rule(n,{result:t}){a(n,t),n.selector.trim().includes("&")&&function(n){let t=n.parent;for(;t;){if("rule"===t.type)return;t=t.parent}const o=e().astSync(n.selector);o&&(o.walkNesting((n=>{n.replaceWith(e.pseudo({value:":scope"}))})),n.selector=o.toString())}(n)}});u.postcss=!0;export{u as default};
